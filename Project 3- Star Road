#https://flax-haze-954.notion.site/Project-3-Star-Road-d9cc3e6496434ff4a57f93f07580a6c4?pvs=4
#Details on the project can be found on the link attached.
import RPi.GPIO as GPIO
import time

# Assign GPIO pin numbers to variables
# left color sensor
l_s2 = 26
l_s3 = 19
l_sig = 13

# right color sensor
r_s2 = 16
r_s3 =5
r_sig = 21

# motor
in1 = 5
in2 = 0
in3 = 11
in4 = 27
ena = 6
enb = 22
cycles = 10

#motor1 = GPIO.PWM(ena, 6)
# Set PWM frequency
pwm_freq = 50

# Set initial motor speeds
left_speed = 15
right_speed = 15

# Setup GPIO and pins
GPIO.setmode(GPIO.BCM)

# right color sensor
GPIO.setup(r_s2, GPIO.OUT)
GPIO.setup(r_s3, GPIO.OUT)
GPIO.setup(r_sig, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)

# left color sensor
GPIO.setup(l_s2, GPIO.OUT)
GPIO.setup(l_s3, GPIO.OUT)
GPIO.setup(l_sig, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)

# Setup PWM for motors
GPIO.setup(ena, GPIO.OUT)
GPIO.setup(enb, GPIO.OUT)
pwm_a = GPIO.PWM(ena, pwm_freq)
pwm_b = GPIO.PWM(enb, pwm_freq)
pwm_a.start(left_speed)
pwm_b.start(right_speed)

# Set the GPIO pins as output and initialize them to low
GPIO.setup(in1, GPIO.OUT)
GPIO.setup(in2, GPIO.OUT)
GPIO.setup(in3, GPIO.OUT)
GPIO.setup(in4, GPIO.OUT)
GPIO.output([in1, in2, in3, in4], GPIO.LOW)

# Function to set motor speed
def set_speed_a(speed):
    pwm_a.ChangeDutyCycle(speed)
    pwm_a.start(speed)

def set_speed_b(speed):
    pwm_b.ChangeDutyCycle(speed)
    pwm_b.start(speed)

# Function to drive motor forward
def forwardr():
    GPIO.output(in1, GPIO.HIGH)
    GPIO.output(in2, GPIO.LOW)
    #time.sleep(1)

def forwardl():
    GPIO.output(in3, GPIO.LOW)
    GPIO.output(in4, GPIO.HIGH)
    #time.sleep(1)

def stopr():
    GPIO.output(in1, GPIO.LOW)
    GPIO.output(in2, GPIO.LOW)
    # time.sleep(1)

def stopl():
    GPIO.output(in3, GPIO.LOW)
    GPIO.output(in4, GPIO.LOW)
    # time.sleep(1)

def stop_all():
    stopr()
    stopl()
    # time.sleep(2)

# Function to detect color from the right sensor
def DetectColorRight():
    GPIO.output(r_s2, GPIO.LOW)
    GPIO.output(r_s3, GPIO.LOW)
    # time.sleep(0.1)
    start_time = time.time()
    for count in range(cycles):
        GPIO.wait_for_edge(r_sig, GPIO.FALLING)
    duration = time.time() - start_time
    red = cycles / duration / 1000

    GPIO.output(r_s2, GPIO.LOW)
    GPIO.output(r_s3, GPIO.HIGH)
    # time.sleep(0.1)
    start_time = time.time()
    for count in range(cycles):
        GPIO.wait_for_edge(r_sig, GPIO.FALLING)
    duration = time.time() - start_time
    blue = cycles / duration / 1000

    GPIO.output(r_s2, GPIO.HIGH)
    GPIO.output(r_s3, GPIO.HIGH)
    # time.sleep(0.1)
    start_time = time.time()
    for count in range(cycles):
        GPIO.wait_for_edge(r_sig, GPIO.FALLING)
    duration = time.time() - start_time
    green = cycles / duration / 1000

    return red, blue, green

    
# Function to detect color from the left sensor
def DetectColorLeft():
    GPIO.output(l_s2, GPIO.LOW)
    GPIO.output(l_s3, GPIO.LOW)
    # time.sleep(0.1)
    start_time = time.time()
    for count in range(cycles):
        GPIO.wait_for_edge(l_sig, GPIO.FALLING)
    duration = time.time() - start_time
    red = cycles / duration / 1000

    GPIO.output(l_s2, GPIO.LOW)
    GPIO.output(l_s3, GPIO.HIGH)
    # time.sleep(0.1)
    start_time = time.time()
    for count in range(cycles):
        GPIO.wait_for_edge(l_sig, GPIO.FALLING)
    duration = time.time() - start_time
    blue = cycles / duration / 1000

    GPIO.output(l_s2, GPIO.HIGH)
    GPIO.output(l_s3, GPIO.HIGH)
    # time.sleep(0.1)
    start_time = time.time()
    for count in range(cycles):
        GPIO.wait_for_edge(l_sig, GPIO.FALLING)
    duration = time.time() - start_time
    green = cycles / duration / 1000
    
    return red, blue, green

try:
    while True:
        left_red, left_blue, left_green = DetectColorLeft()
        right_red, right_blue, right_green = DetectColorRight()

        print('left blue', left_blue)
        print('right blue', right_blue)

        if left_blue >= 30 and right_blue >= 30:
            print('both white')
            forwardr()
            forwardl()
            set_speed_a(15)  
            set_speed_b(15)  

        if left_blue >= 25 and right_blue <= 35:
            stop_all()
            print('in r white and left b')

            while left_blue >= 25 and right_blue <= 35:
                set_speed_a(20)
                set_speed_b(5)
                forwardr()

                left_red, left_blue, left_green = DetectColorLeft()
                right_red, right_blue, right_green = DetectColorRight()
            #if right_blue >= 26:
               # stop_all()  
               # time.sleep(1)

        if right_blue >= 25 and left_blue <= 35:
            stop_all()
            print('in l white and r blue')

            while right_blue >= 25 and left_blue <= 35:
                set_speed_a(5)
                set_speed_b(20)
                forwardl()

                left_red, left_blue, left_green = DetectColorLeft()
                right_red, right_blue, right_green = DetectColorRight()
                
            #if left_blue >=26:
               # stop_all()
               # time.sleep(1)
        
        time.sleep(0.1)

except KeyboardInterrupt:
        GPIO.cleanup()
        pwm_a.stop()
        pwm_b.stop()
